// Generated by view binder compiler. Do not edit!
package me.eduardo.androidApp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.eduardo.androidApp.R;

public final class FragmentEditNoteBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText etUpdateNoteBody;

  @NonNull
  public final EditText etUpdateNoteTitle;

  @NonNull
  public final FloatingActionButton fabDeleteNote;

  @NonNull
  public final FloatingActionButton fabUpdateNote;

  private FragmentEditNoteBinding(@NonNull ConstraintLayout rootView,
      @NonNull EditText etUpdateNoteBody, @NonNull EditText etUpdateNoteTitle,
      @NonNull FloatingActionButton fabDeleteNote, @NonNull FloatingActionButton fabUpdateNote) {
    this.rootView = rootView;
    this.etUpdateNoteBody = etUpdateNoteBody;
    this.etUpdateNoteTitle = etUpdateNoteTitle;
    this.fabDeleteNote = fabDeleteNote;
    this.fabUpdateNote = fabUpdateNote;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEditNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEditNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_edit_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEditNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.et_update_note_body;
      EditText etUpdateNoteBody = rootView.findViewById(id);
      if (etUpdateNoteBody == null) {
        break missingId;
      }

      id = R.id.et_update_note_title;
      EditText etUpdateNoteTitle = rootView.findViewById(id);
      if (etUpdateNoteTitle == null) {
        break missingId;
      }

      id = R.id.fab_delete_note;
      FloatingActionButton fabDeleteNote = rootView.findViewById(id);
      if (fabDeleteNote == null) {
        break missingId;
      }

      id = R.id.fab_update_note;
      FloatingActionButton fabUpdateNote = rootView.findViewById(id);
      if (fabUpdateNote == null) {
        break missingId;
      }

      return new FragmentEditNoteBinding((ConstraintLayout) rootView, etUpdateNoteBody,
          etUpdateNoteTitle, fabDeleteNote, fabUpdateNote);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
